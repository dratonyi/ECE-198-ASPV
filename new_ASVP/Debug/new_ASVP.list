
new_ASVP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000245c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800260c  0800260c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002614  08002614  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002618  08002618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800261c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  0800262c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800262c  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007728  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a7  00000000  00000000  00027768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00028a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00029020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000146c6  00000000  00000000  000295c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074c5  00000000  00000000  0003dc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080cac  00000000  00000000  00045153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5dff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000196c  00000000  00000000  000c5e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080025dc 	.word	0x080025dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080025dc 	.word	0x080025dc

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_uldivmod>:
 80008b4:	b953      	cbnz	r3, 80008cc <__aeabi_uldivmod+0x18>
 80008b6:	b94a      	cbnz	r2, 80008cc <__aeabi_uldivmod+0x18>
 80008b8:	2900      	cmp	r1, #0
 80008ba:	bf08      	it	eq
 80008bc:	2800      	cmpeq	r0, #0
 80008be:	bf1c      	itt	ne
 80008c0:	f04f 31ff 	movne.w	r1, #4294967295
 80008c4:	f04f 30ff 	movne.w	r0, #4294967295
 80008c8:	f000 b974 	b.w	8000bb4 <__aeabi_idiv0>
 80008cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008d4:	f000 f806 	bl	80008e4 <__udivmoddi4>
 80008d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e0:	b004      	add	sp, #16
 80008e2:	4770      	bx	lr

080008e4 <__udivmoddi4>:
 80008e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e8:	9d08      	ldr	r5, [sp, #32]
 80008ea:	4604      	mov	r4, r0
 80008ec:	468e      	mov	lr, r1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d14d      	bne.n	800098e <__udivmoddi4+0xaa>
 80008f2:	428a      	cmp	r2, r1
 80008f4:	4694      	mov	ip, r2
 80008f6:	d969      	bls.n	80009cc <__udivmoddi4+0xe8>
 80008f8:	fab2 f282 	clz	r2, r2
 80008fc:	b152      	cbz	r2, 8000914 <__udivmoddi4+0x30>
 80008fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000902:	f1c2 0120 	rsb	r1, r2, #32
 8000906:	fa20 f101 	lsr.w	r1, r0, r1
 800090a:	fa0c fc02 	lsl.w	ip, ip, r2
 800090e:	ea41 0e03 	orr.w	lr, r1, r3
 8000912:	4094      	lsls	r4, r2
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	0c21      	lsrs	r1, r4, #16
 800091a:	fbbe f6f8 	udiv	r6, lr, r8
 800091e:	fa1f f78c 	uxth.w	r7, ip
 8000922:	fb08 e316 	mls	r3, r8, r6, lr
 8000926:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800092a:	fb06 f107 	mul.w	r1, r6, r7
 800092e:	4299      	cmp	r1, r3
 8000930:	d90a      	bls.n	8000948 <__udivmoddi4+0x64>
 8000932:	eb1c 0303 	adds.w	r3, ip, r3
 8000936:	f106 30ff 	add.w	r0, r6, #4294967295
 800093a:	f080 811f 	bcs.w	8000b7c <__udivmoddi4+0x298>
 800093e:	4299      	cmp	r1, r3
 8000940:	f240 811c 	bls.w	8000b7c <__udivmoddi4+0x298>
 8000944:	3e02      	subs	r6, #2
 8000946:	4463      	add	r3, ip
 8000948:	1a5b      	subs	r3, r3, r1
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3310 	mls	r3, r8, r0, r3
 8000954:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000958:	fb00 f707 	mul.w	r7, r0, r7
 800095c:	42a7      	cmp	r7, r4
 800095e:	d90a      	bls.n	8000976 <__udivmoddi4+0x92>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 33ff 	add.w	r3, r0, #4294967295
 8000968:	f080 810a 	bcs.w	8000b80 <__udivmoddi4+0x29c>
 800096c:	42a7      	cmp	r7, r4
 800096e:	f240 8107 	bls.w	8000b80 <__udivmoddi4+0x29c>
 8000972:	4464      	add	r4, ip
 8000974:	3802      	subs	r0, #2
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	1be4      	subs	r4, r4, r7
 800097c:	2600      	movs	r6, #0
 800097e:	b11d      	cbz	r5, 8000988 <__udivmoddi4+0xa4>
 8000980:	40d4      	lsrs	r4, r2
 8000982:	2300      	movs	r3, #0
 8000984:	e9c5 4300 	strd	r4, r3, [r5]
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	428b      	cmp	r3, r1
 8000990:	d909      	bls.n	80009a6 <__udivmoddi4+0xc2>
 8000992:	2d00      	cmp	r5, #0
 8000994:	f000 80ef 	beq.w	8000b76 <__udivmoddi4+0x292>
 8000998:	2600      	movs	r6, #0
 800099a:	e9c5 0100 	strd	r0, r1, [r5]
 800099e:	4630      	mov	r0, r6
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	fab3 f683 	clz	r6, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d14a      	bne.n	8000a44 <__udivmoddi4+0x160>
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d302      	bcc.n	80009b8 <__udivmoddi4+0xd4>
 80009b2:	4282      	cmp	r2, r0
 80009b4:	f200 80f9 	bhi.w	8000baa <__udivmoddi4+0x2c6>
 80009b8:	1a84      	subs	r4, r0, r2
 80009ba:	eb61 0303 	sbc.w	r3, r1, r3
 80009be:	2001      	movs	r0, #1
 80009c0:	469e      	mov	lr, r3
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d0e0      	beq.n	8000988 <__udivmoddi4+0xa4>
 80009c6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009ca:	e7dd      	b.n	8000988 <__udivmoddi4+0xa4>
 80009cc:	b902      	cbnz	r2, 80009d0 <__udivmoddi4+0xec>
 80009ce:	deff      	udf	#255	; 0xff
 80009d0:	fab2 f282 	clz	r2, r2
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	f040 8092 	bne.w	8000afe <__udivmoddi4+0x21a>
 80009da:	eba1 010c 	sub.w	r1, r1, ip
 80009de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e2:	fa1f fe8c 	uxth.w	lr, ip
 80009e6:	2601      	movs	r6, #1
 80009e8:	0c20      	lsrs	r0, r4, #16
 80009ea:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ee:	fb07 1113 	mls	r1, r7, r3, r1
 80009f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f6:	fb0e f003 	mul.w	r0, lr, r3
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d908      	bls.n	8000a10 <__udivmoddi4+0x12c>
 80009fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000a02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x12a>
 8000a08:	4288      	cmp	r0, r1
 8000a0a:	f200 80cb 	bhi.w	8000ba4 <__udivmoddi4+0x2c0>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	1a09      	subs	r1, r1, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a18:	fb07 1110 	mls	r1, r7, r0, r1
 8000a1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a20:	fb0e fe00 	mul.w	lr, lr, r0
 8000a24:	45a6      	cmp	lr, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x156>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x154>
 8000a32:	45a6      	cmp	lr, r4
 8000a34:	f200 80bb 	bhi.w	8000bae <__udivmoddi4+0x2ca>
 8000a38:	4608      	mov	r0, r1
 8000a3a:	eba4 040e 	sub.w	r4, r4, lr
 8000a3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a42:	e79c      	b.n	800097e <__udivmoddi4+0x9a>
 8000a44:	f1c6 0720 	rsb	r7, r6, #32
 8000a48:	40b3      	lsls	r3, r6
 8000a4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a52:	fa20 f407 	lsr.w	r4, r0, r7
 8000a56:	fa01 f306 	lsl.w	r3, r1, r6
 8000a5a:	431c      	orrs	r4, r3
 8000a5c:	40f9      	lsrs	r1, r7
 8000a5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a62:	fa00 f306 	lsl.w	r3, r0, r6
 8000a66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a6a:	0c20      	lsrs	r0, r4, #16
 8000a6c:	fa1f fe8c 	uxth.w	lr, ip
 8000a70:	fb09 1118 	mls	r1, r9, r8, r1
 8000a74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a78:	fb08 f00e 	mul.w	r0, r8, lr
 8000a7c:	4288      	cmp	r0, r1
 8000a7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a82:	d90b      	bls.n	8000a9c <__udivmoddi4+0x1b8>
 8000a84:	eb1c 0101 	adds.w	r1, ip, r1
 8000a88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a8c:	f080 8088 	bcs.w	8000ba0 <__udivmoddi4+0x2bc>
 8000a90:	4288      	cmp	r0, r1
 8000a92:	f240 8085 	bls.w	8000ba0 <__udivmoddi4+0x2bc>
 8000a96:	f1a8 0802 	sub.w	r8, r8, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	1a09      	subs	r1, r1, r0
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aa4:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	458e      	cmp	lr, r1
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x1e2>
 8000ab4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000abc:	d26c      	bcs.n	8000b98 <__udivmoddi4+0x2b4>
 8000abe:	458e      	cmp	lr, r1
 8000ac0:	d96a      	bls.n	8000b98 <__udivmoddi4+0x2b4>
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	4461      	add	r1, ip
 8000ac6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aca:	fba0 9402 	umull	r9, r4, r0, r2
 8000ace:	eba1 010e 	sub.w	r1, r1, lr
 8000ad2:	42a1      	cmp	r1, r4
 8000ad4:	46c8      	mov	r8, r9
 8000ad6:	46a6      	mov	lr, r4
 8000ad8:	d356      	bcc.n	8000b88 <__udivmoddi4+0x2a4>
 8000ada:	d053      	beq.n	8000b84 <__udivmoddi4+0x2a0>
 8000adc:	b15d      	cbz	r5, 8000af6 <__udivmoddi4+0x212>
 8000ade:	ebb3 0208 	subs.w	r2, r3, r8
 8000ae2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ae6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aea:	fa22 f306 	lsr.w	r3, r2, r6
 8000aee:	40f1      	lsrs	r1, r6
 8000af0:	431f      	orrs	r7, r3
 8000af2:	e9c5 7100 	strd	r7, r1, [r5]
 8000af6:	2600      	movs	r6, #0
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	f1c2 0320 	rsb	r3, r2, #32
 8000b02:	40d8      	lsrs	r0, r3
 8000b04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b08:	fa21 f303 	lsr.w	r3, r1, r3
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	4301      	orrs	r1, r0
 8000b10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b14:	fa1f fe8c 	uxth.w	lr, ip
 8000b18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000b20:	0c0b      	lsrs	r3, r1, #16
 8000b22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b26:	fb00 f60e 	mul.w	r6, r0, lr
 8000b2a:	429e      	cmp	r6, r3
 8000b2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x260>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b3a:	d22f      	bcs.n	8000b9c <__udivmoddi4+0x2b8>
 8000b3c:	429e      	cmp	r6, r3
 8000b3e:	d92d      	bls.n	8000b9c <__udivmoddi4+0x2b8>
 8000b40:	3802      	subs	r0, #2
 8000b42:	4463      	add	r3, ip
 8000b44:	1b9b      	subs	r3, r3, r6
 8000b46:	b289      	uxth	r1, r1
 8000b48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b54:	fb06 f30e 	mul.w	r3, r6, lr
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x28a>
 8000b5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b64:	d216      	bcs.n	8000b94 <__udivmoddi4+0x2b0>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d914      	bls.n	8000b94 <__udivmoddi4+0x2b0>
 8000b6a:	3e02      	subs	r6, #2
 8000b6c:	4461      	add	r1, ip
 8000b6e:	1ac9      	subs	r1, r1, r3
 8000b70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b74:	e738      	b.n	80009e8 <__udivmoddi4+0x104>
 8000b76:	462e      	mov	r6, r5
 8000b78:	4628      	mov	r0, r5
 8000b7a:	e705      	b.n	8000988 <__udivmoddi4+0xa4>
 8000b7c:	4606      	mov	r6, r0
 8000b7e:	e6e3      	b.n	8000948 <__udivmoddi4+0x64>
 8000b80:	4618      	mov	r0, r3
 8000b82:	e6f8      	b.n	8000976 <__udivmoddi4+0x92>
 8000b84:	454b      	cmp	r3, r9
 8000b86:	d2a9      	bcs.n	8000adc <__udivmoddi4+0x1f8>
 8000b88:	ebb9 0802 	subs.w	r8, r9, r2
 8000b8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b90:	3801      	subs	r0, #1
 8000b92:	e7a3      	b.n	8000adc <__udivmoddi4+0x1f8>
 8000b94:	4646      	mov	r6, r8
 8000b96:	e7ea      	b.n	8000b6e <__udivmoddi4+0x28a>
 8000b98:	4620      	mov	r0, r4
 8000b9a:	e794      	b.n	8000ac6 <__udivmoddi4+0x1e2>
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	e7d1      	b.n	8000b44 <__udivmoddi4+0x260>
 8000ba0:	46d0      	mov	r8, sl
 8000ba2:	e77b      	b.n	8000a9c <__udivmoddi4+0x1b8>
 8000ba4:	3b02      	subs	r3, #2
 8000ba6:	4461      	add	r1, ip
 8000ba8:	e732      	b.n	8000a10 <__udivmoddi4+0x12c>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e709      	b.n	80009c2 <__udivmoddi4+0xde>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	e742      	b.n	8000a3a <__udivmoddi4+0x156>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f000 fa56 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f874 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f000 f908 	bl	8000dd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bc8:	f000 f8dc 	bl	8000d84 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(state == STOP)
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <main+0xe0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d119      	bne.n	8000c0a <main+0x52>
    {
    	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bda:	4830      	ldr	r0, [pc, #192]	; (8000c9c <main+0xe4>)
 8000bdc:	f000 fd46 	bl	800166c <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d14b      	bne.n	8000c7e <main+0xc6>
    	{
    		HAL_Delay(10000);
 8000be6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bea:	f000 fab1 	bl	8001150 <HAL_Delay>

    		//turn on the two motors
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <main+0xe8>)
 8000bf4:	f000 fd52 	bl	800169c <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	4828      	ldr	r0, [pc, #160]	; (8000ca0 <main+0xe8>)
 8000bfe:	f000 fd4d 	bl	800169c <HAL_GPIO_WritePin>

    		state = DRIVE;
 8000c02:	2201      	movs	r2, #1
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <main+0xe0>)
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e039      	b.n	8000c7e <main+0xc6>
    	}
    }
    else if(state == DRIVE)
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <main+0xe0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d034      	beq.n	8000c7e <main+0xc6>
    {

    }
    else if(state == TURN)
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <main+0xe0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2202      	movs	r2, #2
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12f      	bne.n	8000c7e <main+0xc6>
    {
    	if(length_travelled >= DEVICE_WIDTH * PI)
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <main+0xec>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fd44 	bl	80006b0 <__aeabi_ui2d>
 8000c28:	4604      	mov	r4, r0
 8000c2a:	460d      	mov	r5, r1
 8000c2c:	a116      	add	r1, pc, #88	; (adr r1, 8000c88 <main+0xd0>)
 8000c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c32:	a317      	add	r3, pc, #92	; (adr r3, 8000c90 <main+0xd8>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	f7ff face 	bl	80001d8 <__aeabi_dmul>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4620      	mov	r0, r4
 8000c42:	4629      	mov	r1, r5
 8000c44:	f7ff fe22 	bl	800088c <__aeabi_dcmpge>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d017      	beq.n	8000c7e <main+0xc6>
    	{
    		if(right_turn == 1)
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <main+0xf0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d103      	bne.n	8000c5e <main+0xa6>
    		{
    			right_turn = 0;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <main+0xf0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e002      	b.n	8000c64 <main+0xac>
    		}
    		else
    		{
    			right_turn = 1;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <main+0xf0>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
    		}

    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2102      	movs	r1, #2
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <main+0xe8>)
 8000c6a:	f000 fd17 	bl	800169c <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2110      	movs	r1, #16
 8000c72:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <main+0xe8>)
 8000c74:	f000 fd12 	bl	800169c <HAL_GPIO_WritePin>

    		state = DRIVE;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <main+0xe0>)
 8000c7c:	601a      	str	r2, [r3, #0]
    	}
    }

    HAL_Delay(50);
 8000c7e:	2032      	movs	r0, #50	; 0x32
 8000c80:	f000 fa66 	bl	8001150 <HAL_Delay>
    if(state == STOP)
 8000c84:	e7a2      	b.n	8000bcc <main+0x14>
 8000c86:	bf00      	nop
 8000c88:	33333333 	.word	0x33333333
 8000c8c:	3fc33333 	.word	0x3fc33333
 8000c90:	f01b866e 	.word	0xf01b866e
 8000c94:	400921f9 	.word	0x400921f9
 8000c98:	20000070 	.word	0x20000070
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	20000074 	.word	0x20000074
 8000ca8:	20000000 	.word	0x20000000

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fc86 	bl	80025cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemClock_Config+0xd0>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <SystemClock_Config+0xd0>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemClock_Config+0xd0>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <SystemClock_Config+0xd4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <SystemClock_Config+0xd4>)
 8000cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <SystemClock_Config+0xd4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d14:	2310      	movs	r3, #16
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d20:	2310      	movs	r3, #16
 8000d22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fcca 	bl	80016d0 <HAL_RCC_OscConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d42:	f000 f8b7 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2102      	movs	r1, #2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 ff2c 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d6e:	f000 f8a1 	bl	8000eb4 <Error_Handler>
  }
}
 8000d72:	bf00      	nop
 8000d74:	3750      	adds	r7, #80	; 0x50
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40007000 	.word	0x40007000

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f001 f920 	bl	8002000 <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f000 f875 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000002c 	.word	0x2000002c
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a2c      	ldr	r2, [pc, #176]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_GPIO_Init+0xd0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2132      	movs	r1, #50	; 0x32
 8000e62:	4812      	ldr	r0, [pc, #72]	; (8000eac <MX_GPIO_Init+0xd4>)
 8000e64:	f000 fc1a 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_GPIO_Init+0xd8>)
 8000e80:	f000 fa70 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin;
 8000e84:	2332      	movs	r3, #50	; 0x32
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_GPIO_Init+0xd4>)
 8000e9c:	f000 fa62 	bl	8001364 <HAL_GPIO_Init>

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020800 	.word	0x40020800

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000efe:	2007      	movs	r0, #7
 8000f00:	f000 f9fc 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_UART_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12b      	bne.n	8000f8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f86:	f000 f9ed 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f890 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001042:	f7ff ffd7 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f001 fa9d 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fdb5 	bl	8000bb8 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001050:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800105c:	0800261c 	.word	0x0800261c
  ldr r2, =_sbss
 8001060:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001064:	2000007c 	.word	0x2000007c

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_Init+0x40>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_Init+0x40>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_Init+0x40>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f931 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff ff0e 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f93b 	bl	800134a <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f911 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000004 	.word	0x20000004
 8001108:	2000000c 	.word	0x2000000c
 800110c:	20000008 	.word	0x20000008

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000000c 	.word	0x2000000c
 8001134:	20000078 	.word	0x20000078

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000078 	.word	0x20000078

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000000c 	.word	0x2000000c

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff47 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5c 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb0 	bl	80012b8 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e159      	b.n	8001634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8148 	bne.w	800162e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a2 	beq.w	800162e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b57      	ldr	r3, [pc, #348]	; (800164c <HAL_GPIO_Init+0x2e8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a56      	ldr	r2, [pc, #344]	; (800164c <HAL_GPIO_Init+0x2e8>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b54      	ldr	r3, [pc, #336]	; (800164c <HAL_GPIO_Init+0x2e8>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_GPIO_Init+0x2ec>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a49      	ldr	r2, [pc, #292]	; (8001654 <HAL_GPIO_Init+0x2f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x202>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a48      	ldr	r2, [pc, #288]	; (8001658 <HAL_GPIO_Init+0x2f4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x1fe>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a47      	ldr	r2, [pc, #284]	; (800165c <HAL_GPIO_Init+0x2f8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x1fa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a46      	ldr	r2, [pc, #280]	; (8001660 <HAL_GPIO_Init+0x2fc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x1f6>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a45      	ldr	r2, [pc, #276]	; (8001664 <HAL_GPIO_Init+0x300>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x1f2>
 8001552:	2304      	movs	r3, #4
 8001554:	e008      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001556:	2307      	movs	r3, #7
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x204>
 800155a:	2303      	movs	r3, #3
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x204>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x204>
 8001566:	2300      	movs	r3, #0
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	f002 0203 	and.w	r2, r2, #3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4093      	lsls	r3, r2
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001578:	4935      	ldr	r1, [pc, #212]	; (8001650 <HAL_GPIO_Init+0x2ec>)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015aa:	4a2f      	ldr	r2, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d4:	4a24      	ldr	r2, [pc, #144]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <HAL_GPIO_Init+0x304>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fe:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_GPIO_Init+0x304>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001628:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_GPIO_Init+0x304>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	f67f aea2 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40013800 	.word	0x40013800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	40020800 	.word	0x40020800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e001      	b.n	800168e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e267      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d075      	beq.n	80017da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d00c      	beq.n	8001714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4b85      	ldr	r3, [pc, #532]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001702:	2b08      	cmp	r3, #8
 8001704:	d112      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001706:	4b82      	ldr	r3, [pc, #520]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001712:	d10b      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4b7e      	ldr	r3, [pc, #504]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d05b      	beq.n	80017d8 <HAL_RCC_OscConfig+0x108>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d157      	bne.n	80017d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e242      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x74>
 8001736:	4b76      	ldr	r3, [pc, #472]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a75      	ldr	r2, [pc, #468]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b70      	ldr	r3, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6f      	ldr	r2, [pc, #444]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6c      	ldr	r2, [pc, #432]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001768:	4b69      	ldr	r3, [pc, #420]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a68      	ldr	r2, [pc, #416]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b66      	ldr	r3, [pc, #408]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a65      	ldr	r2, [pc, #404]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcd6 	bl	8001138 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fcd2 	bl	8001138 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e207      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0xc0>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fcc2 	bl	8001138 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fcbe 	bl	8001138 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1f3      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0xe8>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d063      	beq.n	80018ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e6:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d11c      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e1c7      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4937      	ldr	r1, [pc, #220]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	e03a      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <HAL_RCC_OscConfig+0x244>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fc77 	bl	8001138 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fc73 	bl	8001138 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a8      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4925      	ldr	r1, [pc, #148]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e015      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x244>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fc56 	bl	8001138 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff fc52 	bl	8001138 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e187      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d036      	beq.n	8001928 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_RCC_OscConfig+0x248>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fc36 	bl	8001138 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc32 	bl	8001138 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e167      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x240>)
 80018e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x200>
 80018ee:	e01b      	b.n	8001928 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_OscConfig+0x248>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fc1f 	bl	8001138 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	e00e      	b.n	800191c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fc1b 	bl	8001138 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d907      	bls.n	800191c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e150      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
 8001910:	40023800 	.word	0x40023800
 8001914:	42470000 	.word	0x42470000
 8001918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	4b88      	ldr	r3, [pc, #544]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 800191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1ea      	bne.n	80018fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 8097 	beq.w	8001a64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b81      	ldr	r3, [pc, #516]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b7d      	ldr	r3, [pc, #500]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a7c      	ldr	r2, [pc, #496]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b7a      	ldr	r3, [pc, #488]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b77      	ldr	r3, [pc, #476]	; (8001b44 <HAL_RCC_OscConfig+0x474>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b74      	ldr	r3, [pc, #464]	; (8001b44 <HAL_RCC_OscConfig+0x474>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a73      	ldr	r2, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x474>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7ff fbdb 	bl	8001138 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff fbd7 	bl	8001138 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e10c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x474>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x2ea>
 80019ac:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a63      	ldr	r2, [pc, #396]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	e01c      	b.n	80019f4 <HAL_RCC_OscConfig+0x324>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x30c>
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c6:	4a5e      	ldr	r2, [pc, #376]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6713      	str	r3, [r2, #112]	; 0x70
 80019ce:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	4a5b      	ldr	r2, [pc, #364]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6713      	str	r3, [r2, #112]	; 0x70
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0x324>
 80019dc:	4b58      	ldr	r3, [pc, #352]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a57      	ldr	r2, [pc, #348]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
 80019e8:	4b55      	ldr	r3, [pc, #340]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 80019ee:	f023 0304 	bic.w	r3, r3, #4
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d015      	beq.n	8001a28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff fb9c 	bl	8001138 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a04:	f7ff fb98 	bl	8001138 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e0cb      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0ee      	beq.n	8001a04 <HAL_RCC_OscConfig+0x334>
 8001a26:	e014      	b.n	8001a52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fb86 	bl	8001138 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff fb82 	bl	8001138 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0b5      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ee      	bne.n	8001a30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a38      	ldr	r2, [pc, #224]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a1 	beq.w	8001bb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d05c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d141      	bne.n	8001b06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x478>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fb56 	bl	8001138 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff fb52 	bl	8001138 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e087      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	085b      	lsrs	r3, r3, #1
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	491b      	ldr	r1, [pc, #108]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x478>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff fb2b 	bl	8001138 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7ff fb27 	bl	8001138 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e05c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x416>
 8001b04:	e054      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_RCC_OscConfig+0x478>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb14 	bl	8001138 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff fb10 	bl	8001138 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e045      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_OscConfig+0x470>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x444>
 8001b32:	e03d      	b.n	8001bb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e038      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000
 8001b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d028      	beq.n	8001bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d121      	bne.n	8001bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d11a      	bne.n	8001bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d111      	bne.n	8001bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0cc      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90c      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d044      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d119      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e067      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4934      	ldr	r1, [pc, #208]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fa42 	bl	8001138 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff fa3e 	bl	8001138 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e04f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d20c      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9a2 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	080025f4 	.word	0x080025f4
 8001d84:	20000004 	.word	0x20000004
 8001d88:	20000008 	.word	0x20000008

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d90:	b094      	sub	sp, #80	; 0x50
 8001d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	647b      	str	r3, [r7, #68]	; 0x44
 8001d98:	2300      	movs	r3, #0
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da4:	4b79      	ldr	r3, [pc, #484]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00d      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f200 80e1 	bhi.w	8001f78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dbe:	e0db      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001dc4:	e0db      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc6:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dca:	e0d8      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d063      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	2200      	movs	r2, #0
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dfe:	4622      	mov	r2, r4
 8001e00:	462b      	mov	r3, r5
 8001e02:	f04f 0000 	mov.w	r0, #0
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	0159      	lsls	r1, r3, #5
 8001e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e10:	0150      	lsls	r0, r2, #5
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4621      	mov	r1, r4
 8001e18:	1a51      	subs	r1, r2, r1
 8001e1a:	6139      	str	r1, [r7, #16]
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e30:	4659      	mov	r1, fp
 8001e32:	018b      	lsls	r3, r1, #6
 8001e34:	4651      	mov	r1, sl
 8001e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	018a      	lsls	r2, r1, #6
 8001e3e:	4651      	mov	r1, sl
 8001e40:	ebb2 0801 	subs.w	r8, r2, r1
 8001e44:	4659      	mov	r1, fp
 8001e46:	eb63 0901 	sbc.w	r9, r3, r1
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e5e:	4690      	mov	r8, r2
 8001e60:	4699      	mov	r9, r3
 8001e62:	4623      	mov	r3, r4
 8001e64:	eb18 0303 	adds.w	r3, r8, r3
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	462b      	mov	r3, r5
 8001e6c:	eb49 0303 	adc.w	r3, r9, r3
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e7e:	4629      	mov	r1, r5
 8001e80:	024b      	lsls	r3, r1, #9
 8001e82:	4621      	mov	r1, r4
 8001e84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e88:	4621      	mov	r1, r4
 8001e8a:	024a      	lsls	r2, r1, #9
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e92:	2200      	movs	r2, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e9c:	f7fe fd0a 	bl	80008b4 <__aeabi_uldivmod>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea8:	e058      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eaa:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	099b      	lsrs	r3, r3, #6
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ec4:	4642      	mov	r2, r8
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	f04f 0000 	mov.w	r0, #0
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	0159      	lsls	r1, r3, #5
 8001ed2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed6:	0150      	lsls	r0, r2, #5
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4641      	mov	r1, r8
 8001ede:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ee2:	4649      	mov	r1, r9
 8001ee4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ef4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ef8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001efc:	ebb2 040a 	subs.w	r4, r2, sl
 8001f00:	eb63 050b 	sbc.w	r5, r3, fp
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	00eb      	lsls	r3, r5, #3
 8001f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f12:	00e2      	lsls	r2, r4, #3
 8001f14:	4614      	mov	r4, r2
 8001f16:	461d      	mov	r5, r3
 8001f18:	4643      	mov	r3, r8
 8001f1a:	18e3      	adds	r3, r4, r3
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	464b      	mov	r3, r9
 8001f20:	eb45 0303 	adc.w	r3, r5, r3
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f32:	4629      	mov	r1, r5
 8001f34:	028b      	lsls	r3, r1, #10
 8001f36:	4621      	mov	r1, r4
 8001f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	028a      	lsls	r2, r1, #10
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f46:	2200      	movs	r2, #0
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	61fa      	str	r2, [r7, #28]
 8001f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f50:	f7fe fcb0 	bl	80008b4 <__aeabi_uldivmod>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4613      	mov	r3, r2
 8001f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f76:	e002      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3750      	adds	r7, #80	; 0x50
 8001f84:	46bd      	mov	sp, r7
 8001f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	007a1200 	.word	0x007a1200

08001f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000004 	.word	0x20000004

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0a9b      	lsrs	r3, r3, #10
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	08002604 	.word	0x08002604

08001fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fdc:	f7ff ffdc 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0b5b      	lsrs	r3, r3, #13
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4903      	ldr	r1, [pc, #12]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	08002604 	.word	0x08002604

08002000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e03f      	b.n	8002092 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe ff72 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f829 	bl	800209c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800209c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a0:	b0c0      	sub	sp, #256	; 0x100
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b8:	68d9      	ldr	r1, [r3, #12]
 80020ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	ea40 0301 	orr.w	r3, r0, r1
 80020c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	431a      	orrs	r2, r3
 80020dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020f4:	f021 010c 	bic.w	r1, r1, #12
 80020f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002102:	430b      	orrs	r3, r1
 8002104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002116:	6999      	ldr	r1, [r3, #24]
 8002118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	ea40 0301 	orr.w	r3, r0, r1
 8002122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <UART_SetConfig+0x2cc>)
 800212c:	429a      	cmp	r2, r3
 800212e:	d005      	beq.n	800213c <UART_SetConfig+0xa0>
 8002130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b8d      	ldr	r3, [pc, #564]	; (800236c <UART_SetConfig+0x2d0>)
 8002138:	429a      	cmp	r2, r3
 800213a:	d104      	bne.n	8002146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800213c:	f7ff ff4c 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8002140:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002144:	e003      	b.n	800214e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002146:	f7ff ff33 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 800214a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800214e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002158:	f040 810c 	bne.w	8002374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800215c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002160:	2200      	movs	r2, #0
 8002162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002166:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800216a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800216e:	4622      	mov	r2, r4
 8002170:	462b      	mov	r3, r5
 8002172:	1891      	adds	r1, r2, r2
 8002174:	65b9      	str	r1, [r7, #88]	; 0x58
 8002176:	415b      	adcs	r3, r3
 8002178:	65fb      	str	r3, [r7, #92]	; 0x5c
 800217a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800217e:	4621      	mov	r1, r4
 8002180:	eb12 0801 	adds.w	r8, r2, r1
 8002184:	4629      	mov	r1, r5
 8002186:	eb43 0901 	adc.w	r9, r3, r1
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800219a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219e:	4690      	mov	r8, r2
 80021a0:	4699      	mov	r9, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	eb18 0303 	adds.w	r3, r8, r3
 80021a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021ac:	462b      	mov	r3, r5
 80021ae:	eb49 0303 	adc.w	r3, r9, r3
 80021b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021ca:	460b      	mov	r3, r1
 80021cc:	18db      	adds	r3, r3, r3
 80021ce:	653b      	str	r3, [r7, #80]	; 0x50
 80021d0:	4613      	mov	r3, r2
 80021d2:	eb42 0303 	adc.w	r3, r2, r3
 80021d6:	657b      	str	r3, [r7, #84]	; 0x54
 80021d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021e0:	f7fe fb68 	bl	80008b4 <__aeabi_uldivmod>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4b61      	ldr	r3, [pc, #388]	; (8002370 <UART_SetConfig+0x2d4>)
 80021ea:	fba3 2302 	umull	r2, r3, r3, r2
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	011c      	lsls	r4, r3, #4
 80021f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002204:	4642      	mov	r2, r8
 8002206:	464b      	mov	r3, r9
 8002208:	1891      	adds	r1, r2, r2
 800220a:	64b9      	str	r1, [r7, #72]	; 0x48
 800220c:	415b      	adcs	r3, r3
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002214:	4641      	mov	r1, r8
 8002216:	eb12 0a01 	adds.w	sl, r2, r1
 800221a:	4649      	mov	r1, r9
 800221c:	eb43 0b01 	adc.w	fp, r3, r1
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800222c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002234:	4692      	mov	sl, r2
 8002236:	469b      	mov	fp, r3
 8002238:	4643      	mov	r3, r8
 800223a:	eb1a 0303 	adds.w	r3, sl, r3
 800223e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002242:	464b      	mov	r3, r9
 8002244:	eb4b 0303 	adc.w	r3, fp, r3
 8002248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002258:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800225c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002260:	460b      	mov	r3, r1
 8002262:	18db      	adds	r3, r3, r3
 8002264:	643b      	str	r3, [r7, #64]	; 0x40
 8002266:	4613      	mov	r3, r2
 8002268:	eb42 0303 	adc.w	r3, r2, r3
 800226c:	647b      	str	r3, [r7, #68]	; 0x44
 800226e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002276:	f7fe fb1d 	bl	80008b4 <__aeabi_uldivmod>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4611      	mov	r1, r2
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <UART_SetConfig+0x2d4>)
 8002282:	fba3 2301 	umull	r2, r3, r3, r1
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2264      	movs	r2, #100	; 0x64
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	1acb      	subs	r3, r1, r3
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002296:	4b36      	ldr	r3, [pc, #216]	; (8002370 <UART_SetConfig+0x2d4>)
 8002298:	fba3 2302 	umull	r2, r3, r3, r2
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a4:	441c      	add	r4, r3
 80022a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022b8:	4642      	mov	r2, r8
 80022ba:	464b      	mov	r3, r9
 80022bc:	1891      	adds	r1, r2, r2
 80022be:	63b9      	str	r1, [r7, #56]	; 0x38
 80022c0:	415b      	adcs	r3, r3
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022c8:	4641      	mov	r1, r8
 80022ca:	1851      	adds	r1, r2, r1
 80022cc:	6339      	str	r1, [r7, #48]	; 0x30
 80022ce:	4649      	mov	r1, r9
 80022d0:	414b      	adcs	r3, r1
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022e0:	4659      	mov	r1, fp
 80022e2:	00cb      	lsls	r3, r1, #3
 80022e4:	4651      	mov	r1, sl
 80022e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ea:	4651      	mov	r1, sl
 80022ec:	00ca      	lsls	r2, r1, #3
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	4642      	mov	r2, r8
 80022f6:	189b      	adds	r3, r3, r2
 80022f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022fc:	464b      	mov	r3, r9
 80022fe:	460a      	mov	r2, r1
 8002300:	eb42 0303 	adc.w	r3, r2, r3
 8002304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002314:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800231c:	460b      	mov	r3, r1
 800231e:	18db      	adds	r3, r3, r3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
 8002322:	4613      	mov	r3, r2
 8002324:	eb42 0303 	adc.w	r3, r2, r3
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800232e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002332:	f7fe fabf 	bl	80008b4 <__aeabi_uldivmod>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <UART_SetConfig+0x2d4>)
 800233c:	fba3 1302 	umull	r1, r3, r3, r2
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	2164      	movs	r1, #100	; 0x64
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	3332      	adds	r3, #50	; 0x32
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <UART_SetConfig+0x2d4>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	f003 0207 	and.w	r2, r3, #7
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4422      	add	r2, r4
 8002362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002364:	e105      	b.n	8002572 <UART_SetConfig+0x4d6>
 8002366:	bf00      	nop
 8002368:	40011000 	.word	0x40011000
 800236c:	40011400 	.word	0x40011400
 8002370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002378:	2200      	movs	r2, #0
 800237a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800237e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002386:	4642      	mov	r2, r8
 8002388:	464b      	mov	r3, r9
 800238a:	1891      	adds	r1, r2, r2
 800238c:	6239      	str	r1, [r7, #32]
 800238e:	415b      	adcs	r3, r3
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002396:	4641      	mov	r1, r8
 8002398:	1854      	adds	r4, r2, r1
 800239a:	4649      	mov	r1, r9
 800239c:	eb43 0501 	adc.w	r5, r3, r1
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	00eb      	lsls	r3, r5, #3
 80023aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ae:	00e2      	lsls	r2, r4, #3
 80023b0:	4614      	mov	r4, r2
 80023b2:	461d      	mov	r5, r3
 80023b4:	4643      	mov	r3, r8
 80023b6:	18e3      	adds	r3, r4, r3
 80023b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023bc:	464b      	mov	r3, r9
 80023be:	eb45 0303 	adc.w	r3, r5, r3
 80023c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023e2:	4629      	mov	r1, r5
 80023e4:	008b      	lsls	r3, r1, #2
 80023e6:	4621      	mov	r1, r4
 80023e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ec:	4621      	mov	r1, r4
 80023ee:	008a      	lsls	r2, r1, #2
 80023f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023f4:	f7fe fa5e 	bl	80008b4 <__aeabi_uldivmod>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4b60      	ldr	r3, [pc, #384]	; (8002580 <UART_SetConfig+0x4e4>)
 80023fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	011c      	lsls	r4, r3, #4
 8002406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002410:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002418:	4642      	mov	r2, r8
 800241a:	464b      	mov	r3, r9
 800241c:	1891      	adds	r1, r2, r2
 800241e:	61b9      	str	r1, [r7, #24]
 8002420:	415b      	adcs	r3, r3
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002428:	4641      	mov	r1, r8
 800242a:	1851      	adds	r1, r2, r1
 800242c:	6139      	str	r1, [r7, #16]
 800242e:	4649      	mov	r1, r9
 8002430:	414b      	adcs	r3, r1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002440:	4659      	mov	r1, fp
 8002442:	00cb      	lsls	r3, r1, #3
 8002444:	4651      	mov	r1, sl
 8002446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244a:	4651      	mov	r1, sl
 800244c:	00ca      	lsls	r2, r1, #3
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	4603      	mov	r3, r0
 8002454:	4642      	mov	r2, r8
 8002456:	189b      	adds	r3, r3, r2
 8002458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800245c:	464b      	mov	r3, r9
 800245e:	460a      	mov	r2, r1
 8002460:	eb42 0303 	adc.w	r3, r2, r3
 8002464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	67bb      	str	r3, [r7, #120]	; 0x78
 8002472:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002480:	4649      	mov	r1, r9
 8002482:	008b      	lsls	r3, r1, #2
 8002484:	4641      	mov	r1, r8
 8002486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800248a:	4641      	mov	r1, r8
 800248c:	008a      	lsls	r2, r1, #2
 800248e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002492:	f7fe fa0f 	bl	80008b4 <__aeabi_uldivmod>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <UART_SetConfig+0x4e4>)
 800249c:	fba3 1302 	umull	r1, r3, r3, r2
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	2164      	movs	r1, #100	; 0x64
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	3332      	adds	r3, #50	; 0x32
 80024ae:	4a34      	ldr	r2, [pc, #208]	; (8002580 <UART_SetConfig+0x4e4>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ba:	441c      	add	r4, r3
 80024bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c0:	2200      	movs	r2, #0
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
 80024c4:	677a      	str	r2, [r7, #116]	; 0x74
 80024c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024ca:	4642      	mov	r2, r8
 80024cc:	464b      	mov	r3, r9
 80024ce:	1891      	adds	r1, r2, r2
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	415b      	adcs	r3, r3
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024da:	4641      	mov	r1, r8
 80024dc:	1851      	adds	r1, r2, r1
 80024de:	6039      	str	r1, [r7, #0]
 80024e0:	4649      	mov	r1, r9
 80024e2:	414b      	adcs	r3, r1
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024f2:	4659      	mov	r1, fp
 80024f4:	00cb      	lsls	r3, r1, #3
 80024f6:	4651      	mov	r1, sl
 80024f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fc:	4651      	mov	r1, sl
 80024fe:	00ca      	lsls	r2, r1, #3
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	4603      	mov	r3, r0
 8002506:	4642      	mov	r2, r8
 8002508:	189b      	adds	r3, r3, r2
 800250a:	66bb      	str	r3, [r7, #104]	; 0x68
 800250c:	464b      	mov	r3, r9
 800250e:	460a      	mov	r2, r1
 8002510:	eb42 0303 	adc.w	r3, r2, r3
 8002514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	663b      	str	r3, [r7, #96]	; 0x60
 8002520:	667a      	str	r2, [r7, #100]	; 0x64
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800252e:	4649      	mov	r1, r9
 8002530:	008b      	lsls	r3, r1, #2
 8002532:	4641      	mov	r1, r8
 8002534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002538:	4641      	mov	r1, r8
 800253a:	008a      	lsls	r2, r1, #2
 800253c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002540:	f7fe f9b8 	bl	80008b4 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <UART_SetConfig+0x4e4>)
 800254a:	fba3 1302 	umull	r1, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2164      	movs	r1, #100	; 0x64
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	3332      	adds	r3, #50	; 0x32
 800255c:	4a08      	ldr	r2, [pc, #32]	; (8002580 <UART_SetConfig+0x4e4>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	f003 020f 	and.w	r2, r3, #15
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4422      	add	r2, r4
 8002570:	609a      	str	r2, [r3, #8]
}
 8002572:	bf00      	nop
 8002574:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257e:	bf00      	nop
 8002580:	51eb851f 	.word	0x51eb851f

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	4d0d      	ldr	r5, [pc, #52]	; (80025bc <__libc_init_array+0x38>)
 8002588:	4c0d      	ldr	r4, [pc, #52]	; (80025c0 <__libc_init_array+0x3c>)
 800258a:	1b64      	subs	r4, r4, r5
 800258c:	10a4      	asrs	r4, r4, #2
 800258e:	2600      	movs	r6, #0
 8002590:	42a6      	cmp	r6, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	4d0b      	ldr	r5, [pc, #44]	; (80025c4 <__libc_init_array+0x40>)
 8002596:	4c0c      	ldr	r4, [pc, #48]	; (80025c8 <__libc_init_array+0x44>)
 8002598:	f000 f820 	bl	80025dc <_init>
 800259c:	1b64      	subs	r4, r4, r5
 800259e:	10a4      	asrs	r4, r4, #2
 80025a0:	2600      	movs	r6, #0
 80025a2:	42a6      	cmp	r6, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ac:	4798      	blx	r3
 80025ae:	3601      	adds	r6, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b6:	4798      	blx	r3
 80025b8:	3601      	adds	r6, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	08002614 	.word	0x08002614
 80025c0:	08002614 	.word	0x08002614
 80025c4:	08002614 	.word	0x08002614
 80025c8:	08002618 	.word	0x08002618

080025cc <memset>:
 80025cc:	4402      	add	r2, r0
 80025ce:	4603      	mov	r3, r0
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <memset+0xa>
 80025d4:	4770      	bx	lr
 80025d6:	f803 1b01 	strb.w	r1, [r3], #1
 80025da:	e7f9      	b.n	80025d0 <memset+0x4>

080025dc <_init>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	bf00      	nop
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr

080025e8 <_fini>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr
